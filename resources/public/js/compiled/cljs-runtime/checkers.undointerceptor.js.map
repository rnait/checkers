{"version":3,"sources":["checkers/undointerceptor.cljs"],"mappings":";;;;;AAMA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAuBC;;AAEzC,AAAA,AAAMC,AAAqBC;AAA3B,AACE,AAAA,AAAA,AAACC,AAAML,AAAQM,AAAiBF;;AAClC,AAAKG,AACH,AAAAC,AAAA;AAAAC,AAAA;AAAAC,AAAA;AAAAC,AAEQ,AAAKE;AAAL,AACG,AAAMC,AAAG,AAAA,AAAA,AAAA,AAACC,AAAOF;AACXG,AAAe,AAAKC;AAAL,AACC,AAAMC,AAAQ,AAAA,AAAK,AAAA,AAAOD;AAA1B,AACE,AAACE,AAAe,AAAA,AAACC,AAAiB,AAAA,AAAOH;;AACrCA,AACA,AAAA,AAAA,AAACX,AAAiBY,AAClB,AAAA,AAAA,AAAA,AAAAG,AAACC,AACD,AAACA;AADD,AAAqB,AAAA,AAACC,AAAQ,AAAAF,AAACG,AAAMN;AACrC,AAAA,AAAoBO,AAAKX;;AAPrD,AAQE,AAACT,AAAML,AAAQgB;;AACf,AAAA,AAACG;;AACDN;;AAbb,AAAA,AAAAL,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACC,AAAAA,AAAAA","names":["js/checkers","js/checkers.undointerceptor","js/checkers.undointerceptor.history","checkers.undointerceptor/history","reagent.core.atom","checkers.db/default-db","checkers.undointerceptor/switch_step_history","step","cljs.core.swap_BANG_","cljs.core/assoc-in","checkers.undointerceptor/undo-interceptor","G__55775","G__55776","G__55777","G__55778","re-frame.core/->interceptor","context","db","cljs.core.get_in","update_history","h","newStep","js/console.log","cljs.core.prn_str","p1__55774#","cljs.core.update_in","cljs.core.into","cljs.core.take","cljs.core/conj"],"sourcesContent":["(ns checkers.undointerceptor\n  (:require\n   [re-frame.core :as re-frame]\n   [reagent.core :as reagent]\n   [checkers.db :as db]\n))\n(defonce history (reagent/atom {:stack  [db/default-db]\n                                :step 0}))\n(defn switch_step_history [step]\n  (swap! history assoc-in [:step] step ))\n(def undo-interceptor\n  (re-frame/->interceptor\n   :id :undo\n   :after (fn [context]\n             (let [db (get-in context [:effects :db])\n                   update_history (fn [h]\n                                   (let [newStep (inc (:step h))] \n                                     (js/console.log (prn-str \"step: \" (:step h)))\n                                     (-> h\n                                         (assoc-in [:step] newStep)\n                                         (update-in [:stack] #(into [] (take  newStep  %1)))\n                                         (update-in [:stack] conj db))))]\n               (swap! history update_history)\n               (js/console.log \"interceptor called\")\n               context\n               ))))"]}