{"version":3,"sources":["checkers/handlers.cljs"],"mappings":";;;;;;AAOA,AAAA,AAAMA,AAAuBC,AAAKC,AAAKC,AAAGC;AAA1C,AACE,AAAMC,AAAc,AAAA,AAAKJ,AACL,AAACK,AAA+BF,AAChC,AAACG,AAAqBH,AACtB,AAACI,AAAmBN,AAAKC,AACzBM,AACA,AAAA,AAACC,AAA8CP,AAC/CQ,AACA,AAAA,AAAA,AAACC;AAPrB,AAAA,AAAA,AAQUP;;AAGZ,AAAA,AAAMQ,AAAoBZ,AAAKC,AAAKC;AAApC,AACE,AAAI,AAAA,AAAA,AAACW,AAAM,AAACC,AAAsC,AAAA,AAAKd;AACrD,AAAA,AAAA,AAACe,AAES,AAAA,AAAKf,AACL,AAACO,AAAmBN,AAAKC,AACzBM,AACAQ,AACAN,AACA,AAAA,AAAA,AAAA,AAAA,AAACC;;AAGX,AAAA,AAAA,AAACI,AAEK,AAAA,AAAKf;;;AAEf,AAAA,AAAMiB,AAAcjB,AAAKkB;AAAzB,AACE,AAAAC,AAEyCD;AAFzCC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAOlB;AAAP,AAAAsB,AAAAJ,AAAA,AACOjB;AADP,AAAAqB,AAAAJ,AAAA,AAEOK;AAFP,AAIE,AAAAC,AAAM,AAAA,AAAaP;AAAnB,AAAA,AAAA,AAAAL,AAAA,AAAAY;AACQ,AAACb,AAAmBZ,AAAKC,AAAKC;;AADtC,AAAA,AAAAW,AAAA,AAAAY;AAEW,AAAC1B,AAAsBC,AAAKC,AAAKC,AAAGsB;;AAF/C,AAAA,AAAAX,AAAA,AAAAY;AAGMzB;;AAHN,AAAA,AAAA,AAAA0B,AAAA,AAAA,AAAAD;;;;;;AAKJ,AAAA,AAAAE,AAAMG,AAAkBC;AAAxB,AAAA,AAAAH,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAA4BI;AAA5B,AAAAH,AAAAD,AAAA,AAAA,AAAgCK;AAAhC,AACE,AAAMC,AAAM,AAAA,AAACC,AAAwBJ,AAAIC,AAAIC;AACvCG,AAAO,AAACC,AAAgBN;AAD9B,AAEE,AAAK,AAAA,AAACO,AAASF;AACbL;;AACA,AAACQ,AAAmBR,AAAGG","names":["checkers.handlers/capture_piece_handler","cofx","from","to","captureLoc","updatedDb","checkers.helpers/inc_score_with_capture","checkers.helpers/remove_piece","checkers.helpers/move_piece","checkers.helpers/end_move","checkers.helpers/change_turn_or_show_mandatory_capture","checkers.helpers/switch_pawns_to_queens","checkers.helpers/update_last_move","checkers.handlers/move_piece_handler","cljs.core._EQ_","checkers.helpers/possible_captures_all_pieces?","cljs.core.doall","checkers.helpers/change_turn","checkers.handlers/execute_move","move","map__53997","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","captureLocation","G__53999","js/Error","p__54000","vec__54001","cljs.core.nth","checkers.handlers/show_piece_moves","db","row","col","moves","checkers.helpers/possible_moves?","winner","checkers.helpers/winner?","cljs.core.not_EQ_","checkers.helpers/show_moves"],"sourcesContent":["(ns checkers.handlers\n  (:require\n   [re-frame.core :as re-frame]\n   [checkers.db :as db]\n   [clojure.set :as set]\n   [checkers.helpers :as helpers]\n))\n(defn capture_piece_handler [cofx from to captureLoc]\n  (let [updatedDb (-> (:db cofx)\n                      (helpers/inc_score_with_capture captureLoc)\n                      (helpers/remove_piece captureLoc)\n                      (helpers/move_piece from to)\n                      helpers/end_move\n                      (helpers/change_turn_or_show_mandatory_capture to)\n                      helpers/switch_pawns_to_queens\n                      (helpers/update_last_move :capture))]\n       {:db updatedDb\n        }))\n\n(defn move_piece_handler [cofx from to]\n  (if (= '() (helpers/possible_captures_all_pieces? (:db cofx)))\n    (doall\n     ;(js/console.log (prn-str \"move from piece from \" from \"to \" to))\n     {:db (-> (:db cofx)\n              (helpers/move_piece from to)\n              helpers/end_move\n              helpers/change_turn\n              helpers/switch_pawns_to_queens\n              (helpers/update_last_move :move)\n              )\n      })\n    (doall\n     ;(js/console.log \"can't move, capture is mandatory\")\n     {:db (:db cofx)})))\n\n(defn execute_move [cofx move]\n  (let [{from :from\n         to :to\n         captureLocation :captureLocation} move]\n    ;(js/console.log (prn-str \"execute move handler \" move))\n    (case (:typeOfMove move)\n      :move (move_piece_handler cofx from to)\n      :capture (capture_piece_handler cofx from to captureLocation)\n      nil cofx)))\n\n(defn show_piece_moves [db [row col]]\n  (let [moves (helpers/possible_moves? db [row col])\n        winner (helpers/winner? db)]\n    (if  (not= nil winner)\n      db\n      (helpers/show_moves db moves))))\n\n"]}