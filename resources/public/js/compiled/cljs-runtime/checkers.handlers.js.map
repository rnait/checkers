{"version":3,"sources":["checkers/handlers.cljs"],"mappings":";;;;;;AAOA,AAAA,AAAMA,AAAuBC,AAAKC,AAAKC,AAAGC;AAA1C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEO,AAAA,AAAKH,AACL,AAACI,AAA+BD,AAChC,AAACE,AAAqBF,AACtB,AAACG,AAAmBL,AAAKC,AACzBK,AACA,AAAA,AAACC,AAA8CN,AAC/CO,AACA,AAAA,AAAA,AAACC;;AAGR,AAAA,AAAMC,AAAoBX,AAAKC,AAAKC;AAApC,AACE,AAAI,AAAA,AAAA,AAACU,AAAM,AAACC,AAAsC,AAAA,AAAKb;AACrD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACc,AAES,AAAA,AAAKd,AACL,AAACM,AAAmBL,AAAKC,AACzBK,AACAQ,AACAN,AACA,AAAA,AAAA,AAAA,AAAA,AAACC;;AAIX,AAAA,AAAA,AAACI,AAEK,AAAA,AAAKd;;;AAEf,AAAA,AAAMgB,AAAchB,AAAKiB;AAAzB,AACE,AAAAC,AAEyCD;AAFzCC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAOjB;AAAP,AAAAqB,AAAAJ,AAAA,AACOhB;AADP,AAAAoB,AAAAJ,AAAA,AAEOK;AAFP,AAIE,AAAAC,AAAM,AAAA,AAAaP;AAAnBO,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACQ,AAACb,AAAmBX,AAAKC,AAAKC;;;AADtC;AAEW,AAACH,AAAsBC,AAAKC,AAAKC,AAAGqB;;;AAF/C;AAGQvB;;;;AAHR,AAAA,AAAA0B,AAAA,AAAA,AAAAF","names":["checkers.handlers/capture_piece_handler","cofx","from","to","captureLoc","checkers.helpers/inc_score_with_capture","checkers.helpers/remove_piece","checkers.helpers/move_piece","checkers.helpers/end_move","checkers.helpers/change_turn_or_show_mandatory_capture","checkers.helpers/switch_pawns_to_queens","checkers.helpers/update_last_move","checkers.handlers/move_piece_handler","cljs.core._EQ_","checkers.helpers/possible_captures_all_pieces?","cljs.core.doall","checkers.helpers/change_turn","checkers.handlers/execute_move","move","map__53799","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","captureLocation","G__53801","cljs.core/Keyword","js/Error"],"sourcesContent":["(ns checkers.handlers\n  (:require\n   [re-frame.core :as re-frame]\n   [checkers.db :as db]\n   [clojure.set :as set]\n   [checkers.helpers :as helpers]\n))\n(defn capture_piece_handler [cofx from to captureLoc]\n  {:db\n   (-> (:db cofx)\n       (helpers/inc_score_with_capture captureLoc)\n       (helpers/remove_piece captureLoc)\n       (helpers/move_piece from to)\n       helpers/end_move\n       (helpers/change_turn_or_show_mandatory_capture to)\n       helpers/switch_pawns_to_queens\n       (helpers/update_last_move :capture))\n   :dispatch ^:flush-dom [:auto-play \"b\"]})\n\n(defn move_piece_handler [cofx from to]\n  (if (= '() (helpers/possible_captures_all_pieces? (:db cofx)))\n    (doall\n     ;(js/console.log (prn-str \"move from piece from \" from \"to \" to))\n     {:db (-> (:db cofx)\n              (helpers/move_piece from to)\n              helpers/end_move\n              helpers/change_turn\n              helpers/switch_pawns_to_queens\n              (helpers/update_last_move :move)\n              )\n      :dispatch ^:flush-dom [:auto-play \"b\"]\n      })\n    (doall\n     ;(js/console.log \"can't move, capture is mandatory\")\n     {:db (:db cofx)})))\n\n(defn execute_move [cofx move]\n  (let [{from :from\n         to :to\n         captureLocation :captureLocation} move]\n    ;(js/console.log (prn-str \"execute move handler \" move))\n    (case (:typeOfMove move)\n      :move (move_piece_handler cofx from to)\n      :capture (capture_piece_handler cofx from to captureLocation)\n      :else cofx)))"]}