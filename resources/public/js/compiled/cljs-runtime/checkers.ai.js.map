{"version":3,"sources":["checkers/ai.cljs"],"mappings":";;;;;;;AAQA,AAAA,AAAMA,AAAYC;AAAlB,AACE,AAAMC,AAAG,AAAA,AAAKD;AACRE,AAAM,AAAA,AAAQD;AADpB,AAGE,AAAG,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAS,AAAA,AAAA,AAACA,AAAAA,AAAAA;;AAElB,AAAA,AAAMC,AAASH,AAAKI;AAApB,AACE,AAAMH,AAAG,AAAA,AAAKD;AACRK,AAAO,AAAA,AAAOJ;AACdK,AAAM,AAACC,AAA4CN;AAFzD,AAGE,AAAI,AAAA,AAACO,AAAIJ;AACP,AAACL,AAAWC;;AACZ,AAAMS,AAAO,AAACC,AAAI,AAAKC;AAAL,AAAY,AAAAC,AACC,AAACE,AAAsBd,AAAKW;AAD7BE,AAEC,AAAA,AAAKT;AAFN,AAAA,AAAAQ,AAAAC,AAAAD,AAAAC,AAACV,AAAAA,AAAAA;AAGbG;AAHlB,AAME,AAAI,AAAA,AAACE,AAAEH;AACL,AAACU,AAAMC,AAAIP;;AACX,AAACM,AAAME,AAAIR;;;;AAGrB,AAAA,AAAMS,AAAsBlB,AAAKmB,AAAMf;AAAvC,AACE,AAAMH,AAAG,AAAA,AAAKD;AACRoB,AAAK,AAAA,AAAOnB;AACZK,AAAM,AAACC,AAA4CN;AACnDoB,AAAa,AAACX,AAAI,AAAKC;AAAL,AAAA,AAAA,AAAA,AAAkBA,AACE,AAACR,AACA,AAACW,AAAsBd,AAAKW,AAC5BP;AAC3BE;AAPlB,AASE,AAAI,AAACE,AAAEY,AAAKD;AACV,AAAI,AAAA,AAACX,AAAEW;AACL,AAAA,AAAO,AAAA,AAACJ,AAAMO,AAAeD;;AAC7B,AAAA,AAAO,AAAA,AAACN,AAAMQ,AAAeF;;;AAHjC","names":["checkers.ai/eval_score","cofx","db","score","checkers.ai/minimax","depth","player","moves","checkers.helpers/all_possible_moves_or_only_captures","cljs.core._EQ_","scores","cljs.core.map","move","G__58129","G__58130","checkers.handlers/execute_move","cljs.core.apply","cljs.core/max","cljs.core/min","checkers.ai/get_best_move_minmax","color","turn","moves_scores","cljs.core/max-key","cljs.core/min-key"],"sourcesContent":["(ns checkers.ai\n  (:require\n   [re-frame.core :as re-frame]\n   [checkers.db :as db]\n   [clojure.set :as set]\n   [checkers.helpers :as helpers]\n   [checkers.handlers :as handlers]))\n\n(defn eval_score [cofx]\n  (let [db (:db cofx)\n        score (:score db)]\n    ;(js/console.log (prn-str \"eval_score db \" db))\n    (- (score 0) (score 1))))\n\n(defn minimax [cofx depth]\n  (let [db (:db cofx)\n        player (:turn db)\n        moves (helpers/all_possible_moves_or_only_captures db)]\n    (if (= 0 depth)\n      (eval_score cofx)\n      (let [scores (map (fn [move]  (minimax \n                                     (handlers/execute_move cofx move)\n                                     (dec depth))) \n                        moves\n                        )]\n        ;(js/console.log (prn-str \"best move minimax scores : \" moves))\n        (if (= player \"w\")\n          (apply max scores)\n          (apply min scores))))\n    ))\n\n(defn get_best_move_minmax [cofx color depth] \n  (let [db (:db cofx)\n        turn (:turn db)\n        moves (helpers/all_possible_moves_or_only_captures db)\n        moves_scores (map (fn [move] {:move move\n                                      :score  (minimax\n                                               (handlers/execute_move cofx move)\n                                               depth)})\n                    moves)]\n    ;(js/console.log (prn-str \"best move minimax moves : \" moves))\n    (if (= turn color)\n      (if (= color \"w\")\n        (:move (apply max-key :score moves_scores))\n        (:move (apply min-key :score moves_scores)))\n      nil)))\n"]}